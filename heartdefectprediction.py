# -*- coding: utf-8 -*-
"""heartdefectprediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1veond8tr6Rpv1OvJcFtMzCmzrUE16hY5

importing the dependencies
"""

import numpy as np 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection and processing"""

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/content/heart_disease_data.csv')

# print first 5 rows of the dataset 
heart_data.head()

# print last 5 rows of the dataset 
heart_data.tail()

# number of rows and columns in dataset 
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values 
heart_data.isnull().sum()

# statistical measure about data 
heart_data.describe()

# checking the distribution of target variable 
heart_data['target'].value_counts()

"""1 --> Defective Heart

0 --> Healthy Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns = 'target',axis = 1)         # X has features columns
Y = heart_data['target']                                 # Y has target column

print(X)

print(Y)

"""Splitting the data into Training data and Test data

"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2, stratify = Y,random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data 
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on Training data: ',training_data_accuracy)

# accuracy on test data 
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on Test data: ',test_data_accuracy)

"""Building a predictive system"""

input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)

# change the input data to a numpy array 
input_data_as_numpy_array = np.asarray(input_data)

# reshape the numpy array ae we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1) 

prediction = model.predict(input_data_reshaped)
print(prediction)


if prediction[0] == 0:
  print('the person has a healthy heart')

else:
    print('the person has a defective heart')